// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"






#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((true): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test2_$(NUM_UUID)(result: ())
    -> bool {
    !!((true): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() {}
fn test3() {
    for _ in 0..2 {

        #[allow(unused_must_use, unused_variables)]
        if false {
                {

                    #[prusti::spec_only]
                    #[prusti::loop_body_invariant_spec]
                    #[prusti::spec_id = "$(NUM_UUID)"]
                    || -> bool { true };
                }
            }
    }
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!((true): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test4_$(NUM_UUID)(result: ())
    -> bool {
    !!((true): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test4() {
    for _ in 0..2 {

        #[allow(unused_must_use, unused_variables)]
        if false {
                {

                    #[prusti::spec_only]
                    #[prusti::loop_body_invariant_spec]
                    #[prusti::spec_id = "$(NUM_UUID)"]
                    || -> bool { true };
                }
            }
    }
}
fn main() {}
Loop(LoopSpecification { invariant: DefId(0:10 ~ true[$(CRATE_ID)]::test3::{closure#0}) })
Loop(LoopSpecification { invariant: DefId(0:14 ~ true[$(CRATE_ID)]::test4::{closure#0}) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:6 ~ true[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:8 ~ true[$(CRATE_ID)]::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:11 ~ true[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Inherent([DefId(0:12 ~ true[$(CRATE_ID)]::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) })
