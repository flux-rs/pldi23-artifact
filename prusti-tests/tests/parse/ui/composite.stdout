// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"


























#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!(((!(true && true) || (true && true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((true && ((!(true) || (true))) && (true || true) && true): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    !!(((!((true && true)) || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!(((!(((!(true) || (true))) && true) || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    !!((((!(true) || (true))) && ((!(true) || (true && (true || true))))):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test6_$(NUM_UUID)() -> bool {
    !!(((!((true && true)) ||
                                ((!(true) || ((!(true) || ((!(true) || (true))))))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test6() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test7_$(NUM_UUID)() -> bool {
    !!(((!((true && true)) || ((!((true && true)) || ((true && true)))))):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test7() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test8_$(NUM_UUID)() -> bool {
    !!(((!((true || true)) || ((true || true)))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test9_$(NUM_UUID)() -> bool {
    !!(((!((true || true)) || ((true || (true && (true || true)))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test9() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test10_$(NUM_UUID)() -> bool {
    !!((true &&
                            forall((),
                                #[prusti::spec_only] |a: i32| -> bool
                                    { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test10() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test12_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32| -> bool
                                { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test12() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test13_$(NUM_UUID)() -> bool {
    !!(((!(true) ||
                                ((!(forall((),
                                                        #[prusti::spec_only] |a: i32, b: i32| -> bool
                                                            { ((a == 5): bool) })) || (true))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test13() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test14_$(NUM_UUID)() -> bool {
    !!(((!(true) ||
                                (forall((),
                                        #[prusti::spec_only] |a: i32| -> bool
                                            { ((a == 5): bool) })))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test14() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test15_$(NUM_UUID)() -> bool {
    !!(((!(forall((),
                                            #[prusti::spec_only] |a: i32| -> bool { ((a == 5): bool) }))
                                || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test15() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test16_$(NUM_UUID)() -> bool {
    !!(((!(forall((),
                                            #[prusti::spec_only] |b: i32| -> bool
                                                { ((b == 10): bool) })) ||
                                ((!(true) ||
                                            (forall((),
                                                    #[prusti::spec_only] |a: u32, b: u32| -> bool
                                                        { ((a == 5): bool) })))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test16() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test17_$(NUM_UUID)() -> bool {
    !!((true &&
                            exists((),
                                #[prusti::spec_only] |a: i32| -> bool
                                    { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test17() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test19_$(NUM_UUID)() -> bool {
    !!((exists((),
                            #[prusti::spec_only] |a: i32| -> bool
                                { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test19() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test20_$(NUM_UUID)() -> bool {
    !!(((!(true) ||
                                ((!(exists((),
                                                        #[prusti::spec_only] |a: i32, b: i32| -> bool
                                                            { ((a == 5): bool) })) || (true))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test20() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test21_$(NUM_UUID)() -> bool {
    !!(((!(true) ||
                                (exists((),
                                        #[prusti::spec_only] |a: i32| -> bool
                                            { ((a == 5): bool) })))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test21() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test22_$(NUM_UUID)() -> bool {
    !!(((!(exists((),
                                            #[prusti::spec_only] |a: i32| -> bool { ((a == 5): bool) }))
                                || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test22() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test23_$(NUM_UUID)() -> bool {
    !!(((!(exists((),
                                            #[prusti::spec_only] |b: i32| -> bool
                                                { ((b == 10): bool) })) ||
                                ((!(true) ||
                                            (exists((),
                                                    #[prusti::spec_only] |a: u32, b: u32| -> bool
                                                        { ((a == 5): bool) })))))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test23() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test24_$(NUM_UUID)() -> bool {
    !!((true && true || true): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test24() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test25_$(NUM_UUID)() -> bool {
    !!((forall((), #[prusti::spec_only] |a: i32| -> bool { ((a == 5): bool) })
                            ||
                            forall((),
                                #[prusti::spec_only] |a: i32| -> bool
                                    { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test25() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test26_$(NUM_UUID)() -> bool {
    !!((exists((), #[prusti::spec_only] |a: i32| -> bool { ((a == 5): bool) })
                            ||
                            exists((),
                                #[prusti::spec_only] |a: i32| -> bool
                                    { ((a == 5): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test26() {}
fn main() {}
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ composite[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:7 ~ composite[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ composite[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:11 ~ composite[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ composite[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:15 ~ composite[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ composite[$(CRATE_ID)]::prusti_pre_item_test7_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:19 ~ composite[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:21 ~ composite[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:23 ~ composite[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:26 ~ composite[$(CRATE_ID)]::prusti_pre_item_test12_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:29 ~ composite[$(CRATE_ID)]::prusti_pre_item_test13_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:32 ~ composite[$(CRATE_ID)]::prusti_pre_item_test14_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:35 ~ composite[$(CRATE_ID)]::prusti_pre_item_test15_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:38 ~ composite[$(CRATE_ID)]::prusti_pre_item_test16_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:42 ~ composite[$(CRATE_ID)]::prusti_pre_item_test17_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:45 ~ composite[$(CRATE_ID)]::prusti_pre_item_test19_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:48 ~ composite[$(CRATE_ID)]::prusti_pre_item_test20_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:51 ~ composite[$(CRATE_ID)]::prusti_pre_item_test21_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:54 ~ composite[$(CRATE_ID)]::prusti_pre_item_test22_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:57 ~ composite[$(CRATE_ID)]::prusti_pre_item_test23_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:61 ~ composite[$(CRATE_ID)]::prusti_pre_item_test24_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:63 ~ composite[$(CRATE_ID)]::prusti_pre_item_test25_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
Procedure(ProcedureSpecification { kind: Inherent(Impure), pres: Inherent([DefId(0:67 ~ composite[$(CRATE_ID)]::prusti_pre_item_test26_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) })
